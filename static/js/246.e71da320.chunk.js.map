{"version":3,"file":"static/js/246.e71da320.chunk.js","mappings":"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","sources":["components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","pages/ContactsPage.jsx"],"sourcesContent":["//import PropTypes from 'prop-types';\nimport { deleteContacts } from \"redux/operations\";\nimport { useDispatch /*, useSelector*/ } from \"react-redux\";\n//import { selectContacts, selectFilter } from \"redux/appReducer\";\nexport const ContactListItem = ({contact}) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContacts(contact.id));\n  return (\n    <div>\n      <span>{contact.name}</span>\n      <span> {contact.numbers}</span>\n      <button onClick={handleDelete}>Delete</button>\n    </div>\n  );\n};\n\n//ContactListItem.propTypes = {\n // contact: PropTypes.shape({\n //   id: PropTypes.string,\n //   name: PropTypes.string,\n //  number: PropTypes.string,\n //}).isRequired,\n//};\n","import { ContactListItem } from './ContactListItem/ContactListItem';\nimport { getError, getIsLoading, selectContacts, selectFilter } from 'redux/appReducer';\n\nimport { /*useDispatch,*/ useSelector } from 'react-redux';\n//import { deleteContacts } from 'redux/operations';\n\nexport const ContactList = () => {\n  const items = useSelector(selectContacts);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const filter = useSelector(selectFilter);\n\n  const filterContacts = (items, filter) => {\n    if (filter === '') {\n      return items;\n    } else {\n      return items.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    }\n  };\n  return (\n    <div>\n    {isLoading && <p>Loading contacts...</p>}\n    {error && <p>{error}</p>}\n      {filterContacts(items, filter).map(contact => {\n        const { id } = contact;\n        return (\n          <ContactListItem\n            key={id}\n            contact={contact}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter, setFilter } from 'redux/appReducer';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" onChange={handleFilter} value={filter} />\n    </label>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/appReducer';\nimport { addContacts } from 'redux/operations';\nexport const ContactForm = () => {\nconst items  = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  let initContact = {\n    name:'',\n    numbers:'',\n\n  };\n  const onSubmit = e =>{\n    e.preventDefault();\n    const form = e.target;\n     if (items.find(contact => contact.name === form[0].value)) {\n     alert(`${form[0].value} is already in contacts`);\n     form.reset();\n     return;\n     }\n    dispatch(addContacts({\n      name:form[0].value, \n      numbers:form[1].value}));\n    form.reset();\n\n  }\nconst onChange = e =>{\nlet id = nanoid(5);\nif(e.target.name === \"name\"){\n  initContact.name = e.target.value;\n};\nif(e.target.name === \"number\"){\n  initContact.numbers = e.target.value;\n};\ninitContact.id = id;\n}\n  \n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={onChange}\n          defaultValue={initContact.name}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={onChange}\n          defaultValue={initContact.numbers}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport  {fetchContacts} from '../redux/operations';\nimport { useEffect } from 'react';\nconst { ContactList } = require(\"components/ContactList/ContactList\");\nconst { Filter } = require(\"components/Filter/Filter\");\nconst { ContactForm } = require(\"components/Form/Form\");\nconst { getIsLoading, getError } = require(\"redux/appReducer\");\n\nconst ContactsPage = () => {\n    const isLoading = useSelector(getIsLoading);\n    const error = useSelector(getError);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchContacts());\n      }, [dispatch]);\n    return (\n        <div>\n          <h1>Phonebook</h1>\n          <ContactForm />\n        { isLoading && !error && <b>Request in progress...</b>}\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      );\n}\nexport default ContactsPage;"],"names":["ContactListItem","contact","dispatch","useDispatch","name","numbers","onClick","deleteContacts","id","ContactList","items","useSelector","selectContacts","isLoading","getIsLoading","error","getError","filter","selectFilter","toLowerCase","includes","filterContacts","map","Filter","type","onChange","e","setFilter","target","value","ContactForm","initContact","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","onSubmit","preventDefault","form","find","alert","reset","addContacts","title","required","defaultValue","require","useEffect","fetchContacts"],"sourceRoot":""}