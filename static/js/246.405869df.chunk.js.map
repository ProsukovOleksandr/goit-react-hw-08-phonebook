{"version":3,"file":"static/js/246.405869df.chunk.js","mappings":"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","sources":["components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Form/Form.jsx","../node_modules/nanoid/index.browser.js","pages/ContactsPage.jsx"],"sourcesContent":["//import PropTypes from 'prop-types';\nimport { deleteContacts } from \"redux/operations\";\nimport { useDispatch /*, useSelector*/ } from \"react-redux\";\nimport { Box, Button, Typography } from \"@mui/material\";\n//import { selectContacts, selectFilter } from \"redux/appReducer\";\nexport const ContactListItem = ({contact}) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContacts(contact.id));\n  return (\n    <Box sx={{mt: \"5px\"}}>\n      <Typography sx={{fontWeight: \"600\"}} variant=\"p\" gutterBottom>{contact.name}</Typography>\n      <Typography sx={{fontStyle: \"italic\" }} variant=\"p\" gutterBottom> {contact.number}</Typography>\n      <Button sx={{width: \"40px\", height:\"20px\", padding: \"0\", paddingBottom: \"3px\"}} onClick={handleDelete}>Delete</Button>\n    </Box>\n  );\n};\n\n//ContactListItem.propTypes = {\n // contact: PropTypes.shape({\n //   id: PropTypes.string,\n //   name: PropTypes.string,\n //  number: PropTypes.string,\n //}).isRequired,\n//};\n","import { ContactListItem } from './ContactListItem/ContactListItem';\nimport { getError, getIsLoading, selectContacts, selectFilter } from 'redux/appReducer';\n\nimport { /*useDispatch,*/ useSelector } from 'react-redux';\nimport { Container } from '@mui/material';\n//import { deleteContacts } from 'redux/operations';\n\nexport const ContactList = () => {\n  const items = useSelector(selectContacts);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const filter = useSelector(selectFilter);\n\n  const filterContacts = (items, filter) => {\n    if (filter === '') {\n      return items;\n    } else {\n      return items.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    }\n  };\n  return (\n    <Container maxWidth=\"lg\"\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}>\n    {isLoading && <p>Loading contacts...</p>}\n    {error && <p>{error}</p>}\n      {filterContacts(items, filter).map(contact => {\n        const { id } = contact;\n        return (\n          <ContactListItem\n            key={id}\n            contact={contact}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n","import { Box, CssBaseline, TextField } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter, setFilter } from 'redux/appReducer';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <>\n      <CssBaseline />\n      <Box component=\"form\" autoComplete=\"off\">\n        <TextField type=\"text\" onChange={handleFilter} value={filter} label = \"Find contacts by name\" />\n      </Box>\n    </>\n  );\n};\n","import { Box, Button, CssBaseline, TextField } from '@mui/material';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/appReducer';\nimport { addContacts } from 'redux/operations';\nexport const ContactForm = () => {\n  const items = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  let initContact = {\n    name: '',\n    number: '',\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    if (items.find(contact => contact.name === form[0].value)) {\n      alert(`${form[0].value} is already in contacts`);\n      form.reset();\n      return;\n    }\n    dispatch(\n      addContacts({\n        name: form[0].value,\n        number: form[2].value,\n      })\n    );\n    form.reset();\n  };\n  const onChange = e => {\n    let id = nanoid(5);\n    if (e.target.name === 'name') {\n      initContact.name = e.target.value;\n    }\n    if (e.target.name === 'number') {\n      initContact.number = e.target.value;\n    }\n    initContact.id = id;\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <Box component=\"form\" autoComplete=\"off\" onSubmit={onSubmit}>\n        <TextField\n          type=\"text\"\n          name=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={onChange}\n          defaultValue={initContact.name}\n          label=\"Enter contact name...\"\n          sx={{ mr: '5px' }}\n        />\n        <TextField\n          type=\"tel\"\n          name=\"number\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={onChange}\n          defaultValue={initContact.number}\n          label=\"Enter contact number...\"\n        />\n        <Button\n          type=\"submit\"\n          sx={{\n            height: '56px',\n            color: 'white',\n            backgroundColor: '#1976d2',\n            ':hover': { backgroundColor: '#0e5295' },\n          }}\n        >\n          Add contact\n        </Button>\n      </Box>\n    </>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useDispatch, useSelector } from 'react-redux';\nimport  {fetchContacts} from '../redux/operations';\nimport { useEffect } from 'react';\nimport { Container } from '@mui/material';\nconst { ContactList } = require(\"components/ContactList/ContactList\");\nconst { Filter } = require(\"components/Filter/Filter\");\nconst { ContactForm } = require(\"components/Form/Form\");\nconst { getIsLoading, getError } = require(\"redux/appReducer\");\n\nconst ContactsPage = () => {\n    const isLoading = useSelector(getIsLoading);\n    const error = useSelector(getError);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchContacts());\n      }, [dispatch]);\n\n    return (\n        <Container maxWidth=\"lg\"\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n          <h1>Phonebook</h1>\n          <ContactForm />\n        { isLoading && !error && <b>Request in progress...</b>}\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </Container>\n      );\n}\nexport default ContactsPage;"],"names":["ContactListItem","contact","dispatch","useDispatch","Box","sx","mt","Typography","fontWeight","variant","gutterBottom","name","fontStyle","number","Button","width","height","padding","paddingBottom","onClick","deleteContacts","id","ContactList","items","useSelector","selectContacts","isLoading","getIsLoading","error","getError","filter","selectFilter","Container","maxWidth","display","flexDirection","alignItems","justifyContent","toLowerCase","includes","filterContacts","map","Filter","component","autoComplete","type","onChange","e","setFilter","target","value","label","ContactForm","initContact","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","CssBaseline","onSubmit","preventDefault","form","find","alert","reset","addContacts","TextField","title","required","defaultValue","mr","color","backgroundColor","require","useEffect","fetchContacts"],"sourceRoot":""}